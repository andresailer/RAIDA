#include <ROOT_AIDA/utilROOT.h>
#include <TH1F.h>
#include <TDirectory.h>
#include <TFile.h>
#include <TTree.h>


#include <iostream>

#include <AIDA/IAnalysisFactory.h>
#include <AIDA/ITreeFactory.h>
#include <AIDA/ITree.h>
#include <AIDA/IHistogramFactory.h>
#include <AIDA/IHistogram1D.h>
#include <AIDA/IHistogram2D.h>
#include <AIDA/IHistogram3D.h>
#include <AIDA/ICloud1D.h>
#include <AIDA/ITupleFactory.h>
#include <AIDA/IDataPointSetFactory.h>

using namespace AIDA ;
using namespace std;

int main()
{
  IAnalysisFactory * myaida;
  ITreeFactory * mytreefactory;
  ITree * mytree;
  IHistogramFactory * myhistofactory;
  IHistogram1D * myhisto;
  ICloud1D* mycloud;
  ITupleFactory * mytuplefactory;
  IDataPointSetFactory * mydatapointsetfactory;
  myaida = AIDA_createAnalysisFactory();
  mytreefactory = myaida->createTreeFactory();


  std::string storeName("aidaroot.root");
  std::string storeType("root");
  bool readOnly = false;
  bool createNew = false;
  std::string options("keine");
  mytree = mytreefactory->create(storeName,storeType,readOnly,createNew,options);

  myhistofactory = myaida->createHistogramFactory(*mytree);
  mytuplefactory = myaida->createTupleFactory(*mytree);
  //  mydatapointsetfactory = myaida->createDataPointSetFactory(*mytree);
  // myaida->createFunctionFactory(*mytree);
  // myaida->createPlotterFactory();
  // myaida->createFitFactory();

  mycloud = myhistofactory->createCloud1D("","acloud",100);
  mycloud->fill(1.);
  mycloud->fill(2.);
  mycloud->fill(3.);
  mycloud->fill(1.);
  mycloud->fill(2.);
  mycloud->fill(3.);
  mycloud->fill(1.);
  mycloud->fill(2.);
  mycloud->fill(3.);
  mycloud->fill(3.);
  mycloud->fill(3.);
  myhisto = myhistofactory->createHistogram1D("","projhist",100,0,3.00001,"");
  mycloud->fillHistogram(*myhisto);
  cout << "myhisto mean + rms: " << myhisto->mean() << " " << myhisto->rms() << endl; 
  cout << "sum of weights: " << mycloud->sumOfWeights() << 
    " max entries: " << mycloud->maxEntries() << 
    " is converted: " << mycloud->isConverted() << endl; 

  cout << "mean: " << mycloud->mean() << 
    " RMS: " << mycloud->rms() << 
    " Edge: " << mycloud->lowerEdge() << " " << mycloud->upperEdge() << 
    " value " << mycloud->value(10) << 
    " weight: " << mycloud->weight(10) << endl;
  //  cout << "histo: " << mycloud->histogram().mean() << endl;

  //  mycloud->scale(3.);
  cout << " value " ;
  for (int i =0;i<10;i++)
    {
      cout << mycloud->weight(i) << " " ;  
    }
  cout << endl; 
  cout << "titel: " << mycloud->title() << " has " << mycloud->dimension() << " dims." << endl;
  string name("mycloud");
  mycloud->setTitle(name);
  cout << mytree->storeName() << endl;
  //  cout << mytree->pwd() << endl ;
  mytree->mkdir("subdir");
  cout << mytree->pwd() << endl;

  mytree->mkdir("subdir/unter");
  mytree->cd("subdir");
  cout << mytree->pwd() << endl;
/// Schliessen der Datei. -----------------------------------------------------
  mytree->commit();
  mytree->close();
}
