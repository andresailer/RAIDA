#include <ROOT_AIDA/utilROOT.h>
#include <TH1F.h>
#include <TDirectory.h>
#include <TFile.h>
#include <TTree.h>


#include <iostream>

#include <AIDA/IAnalysisFactory.h>
#include <AIDA/ITreeFactory.h>
#include <AIDA/ITree.h>
#include <AIDA/IHistogramFactory.h>
#include <AIDA/IHistogram1D.h>
#include <AIDA/IHistogram2D.h>
#include <AIDA/IHistogram3D.h>

using namespace AIDA ;
using namespace std;

int main()
{
  IAnalysisFactory * myaida;
  ITreeFactory * mytreefactory;
  ITree * mytree;
  IHistogramFactory * myhistofactory;
  IHistogram1D * myhisto;
  IHistogram1D * myhistox;
  IHistogram1D * myhistoxx;
  IHistogram2D * my2dhisto;
  myaida = AIDA_createAnalysisFactory();
  mytreefactory = myaida->createTreeFactory();


  std::string storeName("aidaroot.root");
  std::string storeType("root");
  bool readOnly = false;
  bool createNew = false;
  std::string options("keine");
  mytree = mytreefactory->create(storeName,storeType,readOnly,createNew,options);

  myhistofactory = myaida->createHistogramFactory(*mytree);


  std::string path("");
  std::string title("myfirsthisto");
  int nBins = 10;
  double lowerEdge =1;
  double upperEdge = 11;
  std::string optionsx("");
  myhisto = myhistofactory->createHistogram1D(path,
					      title,
					      nBins,
					      lowerEdge,
					      upperEdge,
					      optionsx) ;
  title = "mysecond";
  myhistox = myhistofactory->createHistogram1D(path,
					      title,
					      nBins,
					      lowerEdge,
					      upperEdge,
					      optionsx) ;
  title = "mythird";
  myhistoxx = myhistofactory->createHistogram1D(
					      title,
					      nBins,
					      lowerEdge,
					      upperEdge) ;

  std::string path2d("");
  std::string title2d("myfirst2d");
  int nBinsX = 3;
  double lowerEdgeX =1;
  double upperEdgeX = 4;
  int nBinsY = 4;
  double lowerEdgeY =1;
  double upperEdgeY = 5;
  my2dhisto = myhistofactory->createHistogram2D(path2d,
					      title2d,
					      nBinsX,
					      lowerEdgeX,
					      upperEdgeX,
					      nBinsY,
					      lowerEdgeY,
					      upperEdgeY,
					      optionsx) ;



  std::string y("London");
  myhisto->setTitle(y);
  myhisto->reset();
  cout << "Histotitel: " << myhisto->title() << 
    " " << myhisto->dimension() << endl;

  myhisto->fill(1.,0.5);
  myhisto->fill(1.1,0.5);
  myhisto->fill(1.2,0.5);
  myhisto->fill(1.3,1.5);

  myhisto->fill(2.,0.5);
  myhisto->fill(3.,2.);
  myhisto->fill(4.,3.);
  myhisto->fill(5.);
  myhisto->fill(6.);
  myhisto->fill(7.);
  myhisto->fill(8.);
  myhisto->fill(9.);
  myhisto->fill(10.);
  myhisto->fill(5.);

  myhisto->fill(0.,0.75);
  myhisto->fill(0.,0.75);
  myhisto->fill(12.,0.75);
  myhisto->fill(12.,0.75);


  myhistox->fill(3.,1.);
  myhistox->fill(3.,1.);
  myhistox->fill(4.,1.);
  myhistox->fill(4.,1.);
  myhistox->fill(5.,1.);
  myhistox->fill(5.,1.);
  myhistox->fill(6.,1.);
  myhistox->fill(6.,1.);
  myhistox->fill(6.,1.);
  myhistox->fill(6.,1.);



  myhisto->add(*myhistox); 
  cout << "inrange entries: " << myhisto->entries()
       << " Entries: " << myhisto->allEntries() 
       << " extra Entries: " << myhisto->extraEntries() << endl;
  cout << "inrange integral: " << myhisto->sumBinHeights() << 
    " all integral: " << myhisto->sumAllBinHeights() << 
    " extra integral: " << myhisto->sumExtraBinHeights() << endl;


  ///  myhisto->scale(3.);
  cout << "bin minimum: " << myhisto->minBinHeight() 
       << " bin maximum: " << myhisto->maxBinHeight()  << endl;

  for (int i=0;i<=11;i++)
    cout << myhisto->binEntries(i) << " "; 
  cout << endl;
  for (int i=0;i<=11;i++)
    cout << myhisto->binHeight(i) << " "; 
  cout << endl;
  for (int i=0;i<=11;i++)
    cout << myhisto->binError(i) << " "; 
  cout << endl;
  for (int i=0;i<=11;i++)
    {
      double x;
      x = (double)i +0.5;
      cout << myhisto->coordToIndex(x) << " "; 
    }
  cout << endl;
  cout << "binmean: " ;
  for (int i=0;i<=11;i++)
    {
      cout << myhisto->binMean(i) << " "; 
    }
  cout << endl;
  cout << "mean: " << myhisto->mean() 
       << " RMS: " << myhisto->rms() << endl;
/// Anlegen eines TTrees ------------------------------------------------------
  TTree *ttree = new TTree("mytree","my first ttree obj.");
  Double_t px,py,pz,pw;
  ttree->Branch("px",&px,"px/D");
  ttree->Branch("py",&py,"py/D");
  ttree->Branch("pz",&pz,"pz/D");
  ttree->Branch("pw",&pw,"pw/D");
  px = 1; py = 2; pz  = 3; pw = 4;
  ttree->Fill();
  px = 5; py = 6; pz  = 7; pw = 8;
  ttree->Fill();
  px = 9; py = 10; pz  = 11; pw = 12;
  ttree->Fill();
  ttree->Print();



  Double_t xpx,xpy,xpz,xpw;
  ttree->SetBranchAddress("px",&xpx);
  ttree->SetBranchAddress("py",&xpy);
  ttree->SetBranchAddress("pz",&xpz);
  ttree->SetBranchAddress("pw",&xpw);
  for (int i=0;i<(int)ttree->GetEntriesFast();i++) 
    {
      ttree->GetEntry(i);
      cout << xpx << " " << xpy << " " << xpz << " " << xpw << " " << endl;
    }
/// Schliessen der Datei. -----------------------------------------------------
  mytree->commit();
  mytree->close();
  cout << "Tree Entry: " << xpx << endl;
}

